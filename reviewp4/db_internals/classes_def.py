#!/usr/bin/env python3.0
# -*- coding: utf-8 -*-
#
# Warning: this file was generated automatically. Do not change it by hand.
#


class DBObject:
    "This is a base class for ContainerObjects generated from UML class diagram of ReView data storage."
    attributes_set = set([])
    computed_attributes_set = set([])
    def __init__(self, factory, name, oid = None, path = None):
        self._factory = factory
        self.name = name  # Name of object, must be  present in objects from DB
        self._oid = oid   # DB uid of corresponding object
        self._path = path # path in the database to the object
        self.attrs = {}

    def representation(self, getComputedAttributes = 1, attrs = [], includeOIDs = False):
        'Get representation of object valid for sending over (e.g.) XMLRPC'
        res = {}
        if attrs:
            attrs_set = attrs
        else:
            attrs_set = self.__class__.attributes_set
            if getComputedAttributes:
                attrs_set =  self.__class__.attributes_set.union(self.__class__.computed_attributes_set)  
        for a in attrs_set:
            a_val = getattr(self, a)
            if not (a_val is None):
                res[a] = a_val
        if includeOIDs and not (self._oid is None):
            res['#oid#'] = str(self._oid)
        if not (self._path is None):
            res['#path#'] = self._path
        return res
    
    def setAttributes(self, attrs):
        'Set attributes of object'
        for a in self.__class__.attributes_set:
            if attrs.has_key(a):
                self.attrs[a] = attrs[a]
        return self

    def updateAttribute(self, a_name):
        # make some actions to get attribute from DB
        self.attrs[a_name] = self._factory.db.getContainerSingleAttributeWithDefault(self._oid, a_name, None)
        return self.attrs[a_name]  # KeyError may be raised

    def getOid(self):
        return self._oid

    def __getattr__(self, a_name):
        ##return getattr(self.c, name)
        if a_name in self.__class__.attributes_set:
            try:
                return self.attrs[a_name]
            except KeyError:
                return self.updateAttribute(a_name)
        elif a_name in self.__class__.computed_attributes_set:
            getattr(self, 'update_' + a_name)() # invoke computation of attribute
            return getattr(self, a_name)
        else:
            raise AttributeError('Current object has no Attribute %s' %  a_name)


class LayerOnProfile(DBObject):
    attributes_set = set(["name", "path", "zType"])
    computed_attributes_set = set([])
    def __init__(self, factory, name, oid, path):
        DBObject.__init__(self, factory, name, oid, path)


class Grid2D_def(DBObject):
    attributes_set = set(["name", "path", "type", "min", "max", "validPoints", "ref2par"])
    computed_attributes_set = set(["data"])
    def __init__(self, factory, name, oid, path):
        DBObject.__init__(self, factory, name, oid, path)


    def update_data(self):
        raise RuntimeError('This class must be specialised (inherited from) in order to use computed attributes.')


class Parameter(DBObject):
    attributes_set = set(["name", "units", "type"])
    computed_attributes_set = set([])
    def __init__(self, factory, name, oid, path):
        DBObject.__init__(self, factory, name, oid, path)


class EarthTemplateParameter(DBObject):
    attributes_set = set(["name", "value"])
    computed_attributes_set = set([])
    def __init__(self, factory, name, oid, path):
        DBObject.__init__(self, factory, name, oid, path)


class WellAttachmentToCube(DBObject):
    attributes_set = set(["name", "xShift", "yShift", "zShift", "zCompression", "cubeRef", "stretchPoints", "refWavelet", "corrIntervalUp", "corrIntervalDown", "corrCoeff", "nTraces", "direction"])
    computed_attributes_set = set([])
    def __init__(self, factory, name, oid, path):
        DBObject.__init__(self, factory, name, oid, path)


class PointSet(DBObject):
    attributes_set = set(["name", "color", "thickness", "path", "labelColor", "labelFont", "shiftX", "shiftY", "labelFormat", "parameterRef"])
    computed_attributes_set = set([])
    def __init__(self, factory, name, oid, path):
        DBObject.__init__(self, factory, name, oid, path)


class Vertex(DBObject):
    attributes_set = set(["name", "coords", "ref2Well"])
    computed_attributes_set = set([])
    def __init__(self, factory, name, oid, path):
        DBObject.__init__(self, factory, name, oid, path)


class Line(DBObject):
    attributes_set = set(["name", "path", "geometry", "cdp", "cdpStep", "refCdp", "refSp"])
    computed_attributes_set = set([])
    def __init__(self, factory, name, oid, path):
        DBObject.__init__(self, factory, name, oid, path)


class Cube(DBObject):
    attributes_set = set(["name", "path", "origin", "dx", "dy", "nx", "ny", "startInline", "startXline", "ref2are1"])
    computed_attributes_set = set([])
    def __init__(self, factory, name, oid, path):
        DBObject.__init__(self, factory, name, oid, path)


class ParameterInWell(DBObject):
    attributes_set = set(["name", "value", "ref2par", "ref2hor"])
    computed_attributes_set = set([])
    def __init__(self, factory, name, oid, path):
        DBObject.__init__(self, factory, name, oid, path)


class CoreGroup(DBObject):
    attributes_set = set(["parentMethods", "dependentMethods", "name"])
    computed_attributes_set = set([])
    def __init__(self, factory, name, oid, path):
        DBObject.__init__(self, factory, name, oid, path)


class MetaInformation(DBObject):
    attributes_set = set(["name", "path"])
    computed_attributes_set = set([])
    def __init__(self, factory, name, oid, path):
        DBObject.__init__(self, factory, name, oid, path)


class LogData_def(DBObject):
    attributes_set = set(["name", "min", "max", "top", "bottom", "path", "dPath", "auxDPath", "units", "format", "type", "zType", "ref2Doc1", "ref2parent_data", "ref2parent_layers", "computation_mode", "step"])
    computed_attributes_set = set(["data"])
    def __init__(self, factory, name, oid, path):
        DBObject.__init__(self, factory, name, oid, path)


    def update_data(self):
        raise RuntimeError('This class must be specialised (inherited from) in order to use computed attributes.')


class CubeClassificationPortrait(DBObject):
    attributes_set = set(["name", "path"])
    computed_attributes_set = set([])
    def __init__(self, factory, name, oid, path):
        DBObject.__init__(self, factory, name, oid, path)


class CubeData(DBObject):
    attributes_set = set(["name", "path", "type", "zType", "ref2doc1", "min", "max", "classes"])
    computed_attributes_set = set([])
    def __init__(self, factory, name, oid, path):
        DBObject.__init__(self, factory, name, oid, path)


class Repository(DBObject):
    attributes_set = set(["name", "comments"])
    computed_attributes_set = set([])
    def __init__(self, factory, name, oid, path):
        DBObject.__init__(self, factory, name, oid, path)


class FaultLine_def(DBObject):
    attributes_set = set(["name", "path", "ref2hor", "ref2flt", "color"])
    computed_attributes_set = set(["data"])
    def __init__(self, factory, name, oid, path):
        DBObject.__init__(self, factory, name, oid, path)


    def update_data(self):
        raise RuntimeError('This class must be specialised (inherited from) in order to use computed attributes.')


class Point(DBObject):
    attributes_set = set(["coords", "name"])
    computed_attributes_set = set([])
    def __init__(self, factory, name, oid, path):
        DBObject.__init__(self, factory, name, oid, path)


class WellMethodInfo(DBObject):
    attributes_set = set(["name", "value", "uom", "comment"])
    computed_attributes_set = set([])
    def __init__(self, factory, name, oid, path):
        DBObject.__init__(self, factory, name, oid, path)


class Layer(DBObject):
    attributes_set = set(["name", "refs2Layl", "refs2Layc", "bgcolor", "bgon", "transparency", "fgcolor", "pattern", "lithology", "borderon", "bordercolor", "borderthick"])
    computed_attributes_set = set([])
    def __init__(self, factory, name, oid, path):
        DBObject.__init__(self, factory, name, oid, path)


class Signal_def(DBObject):
    attributes_set = set(["name", "path", "waveletType", "step", "waveletLength", "frequency", "attenuation", "phase", "inversePolarity", "filtration", "filterParameters", "autocorTimeStart", "autocorTimeEnd", "autocorQuenching", "autocorDataName"])
    computed_attributes_set = set(["wavelet"])
    def __init__(self, factory, name, oid, path):
        DBObject.__init__(self, factory, name, oid, path)


    def update_wavelet(self):
        raise RuntimeError('This class must be specialised (inherited from) in order to use computed attributes.')


class Area_def(DBObject):
    attributes_set = set(["color", "thickness", "path", "brushColor", "filled", "lineStyle", "ticksStyle", "zLevel", "name"])
    computed_attributes_set = set(["data"])
    def __init__(self, factory, name, oid, path):
        DBObject.__init__(self, factory, name, oid, path)


    def update_data(self):
        raise RuntimeError('This class must be specialised (inherited from) in order to use computed attributes.')


class WellLogTemplateEltProp(DBObject):
    attributes_set = set(["name", "type", "value"])
    computed_attributes_set = set([])
    def __init__(self, factory, name, oid, path):
        DBObject.__init__(self, factory, name, oid, path)


class Lineset(DBObject):
    attributes_set = set(["name", "color", "thickness", "stroke", "ticksStyle"])
    computed_attributes_set = set([])
    def __init__(self, factory, name, oid, path):
        DBObject.__init__(self, factory, name, oid, path)


class DirectionalLogData(DBObject):
    attributes_set = set(["name", "path"])
    computed_attributes_set = set([])
    def __init__(self, factory, name, oid, path):
        DBObject.__init__(self, factory, name, oid, path)


class Horizon(DBObject):
    attributes_set = set(["name", "refs2horl", "refs2horc", "color", "thickness", "mode"])
    computed_attributes_set = set([])
    def __init__(self, factory, name, oid, path):
        DBObject.__init__(self, factory, name, oid, path)


class Line3D(DBObject):
    attributes_set = set(["isClosed", "points", "name"])
    computed_attributes_set = set([])
    def __init__(self, factory, name, oid, path):
        DBObject.__init__(self, factory, name, oid, path)


class WellAttachmentToLine(DBObject):
    attributes_set = set(["name", "xShift", "yShift", "zShift", "zCompression", "lineRef", "stretchPoints", "refWavelet", "corrIntervalUp", "corrIntervalDown", "corrCoeff", "nTraces", "direction"])
    computed_attributes_set = set([])
    def __init__(self, factory, name, oid, path):
        DBObject.__init__(self, factory, name, oid, path)


class WellProfile(DBObject):
    attributes_set = set(["name", "thickness", "color", "refs2Wells"])
    computed_attributes_set = set([])
    def __init__(self, factory, name, oid, path):
        DBObject.__init__(self, factory, name, oid, path)


class LayerOnCube(DBObject):
    attributes_set = set(["path", "zType"])
    computed_attributes_set = set([])
    def __init__(self, factory, name, oid, path):
        DBObject.__init__(self, factory, name, oid, path)


class HorizonOnCube(DBObject):
    attributes_set = set(["path", "zType", "name"])
    computed_attributes_set = set([])
    def __init__(self, factory, name, oid, path):
        DBObject.__init__(self, factory, name, oid, path)


class FaultOnLine(DBObject):
    attributes_set = set(["name", "path"])
    computed_attributes_set = set([])
    def __init__(self, factory, name, oid, path):
        DBObject.__init__(self, factory, name, oid, path)


class EarthTemplate(DBObject):
    attributes_set = set(["name", "refs2Grids"])
    computed_attributes_set = set([])
    def __init__(self, factory, name, oid, path):
        DBObject.__init__(self, factory, name, oid, path)


class Fault_def(DBObject):
    attributes_set = set(["name", "color", "thickness", "refs2fltl", "refs2fltc"])
    computed_attributes_set = set(["sticks2d", "sticks3d"])
    def __init__(self, factory, name, oid, path):
        DBObject.__init__(self, factory, name, oid, path)


    def update_sticks2d(self):
        raise RuntimeError('This class must be specialised (inherited from) in order to use computed attributes.')


    def update_sticks3d(self):
        raise RuntimeError('This class must be specialised (inherited from) in order to use computed attributes.')


class Project(DBObject):
    attributes_set = set(["name", "path", "coordinateSystem"])
    computed_attributes_set = set([])
    def __init__(self, factory, name, oid, path):
        DBObject.__init__(self, factory, name, oid, path)


class Activity(DBObject):
    attributes_set = set(["name", "userId", "startTime", "endTime", "refToDocument", "pathRunArgs", "pathError", "pathOut", "shortComment", "rc", "host", "type", "outDataSet", "inDataSet"])
    computed_attributes_set = set([])
    def __init__(self, factory, name, oid, path):
        DBObject.__init__(self, factory, name, oid, path)


class HorizonOnLine(DBObject):
    attributes_set = set(["path", "zType", "name"])
    computed_attributes_set = set([])
    def __init__(self, factory, name, oid, path):
        DBObject.__init__(self, factory, name, oid, path)


class GenericWellLogTemplate(DBObject):
    attributes_set = set(["name", "path", "owner"])
    computed_attributes_set = set([])
    def __init__(self, factory, name, oid, path):
        DBObject.__init__(self, factory, name, oid, path)


class Well(DBObject):
    attributes_set = set(["name", "path", "coords", "trajectoryD", "trajectoryT", "mdTimeAbsD", "production_startdate", "well_type", "well_status", "field", "alias", "pad", "deposit", "location", "province", "county", "state", "country", "service_company", "company", "unique_well_id"])
    computed_attributes_set = set([])
    def __init__(self, factory, name, oid, path):
        DBObject.__init__(self, factory, name, oid, path)


class GeologicObjects(DBObject):
    attributes_set = set(["name"])
    computed_attributes_set = set([])
    def __init__(self, factory, name, oid, path):
        DBObject.__init__(self, factory, name, oid, path)


class PointParameter(DBObject):
    attributes_set = set(["ref2par", "name", "value", "valueS", "valueI"])
    computed_attributes_set = set([])
    def __init__(self, factory, name, oid, path):
        DBObject.__init__(self, factory, name, oid, path)


class Isolineset(DBObject):
    attributes_set = set(["name", "ref2par"])
    computed_attributes_set = set([])
    def __init__(self, factory, name, oid, path):
        DBObject.__init__(self, factory, name, oid, path)


class LineData(DBObject):
    attributes_set = set(["name", "path", "type", "zType", "ref2doc1", "picturePath", "min", "max", "classes"])
    computed_attributes_set = set([])
    def __init__(self, factory, name, oid, path):
        DBObject.__init__(self, factory, name, oid, path)


class Background(DBObject):
    attributes_set = set(["name"])
    computed_attributes_set = set([])
    def __init__(self, factory, name, oid, path):
        DBObject.__init__(self, factory, name, oid, path)


class WellLogTemplateElement(DBObject):
    attributes_set = set(["name", "method", "boundaries", "id", "top", "bottom", "max", "min", "track", "color", "thick", "vertical_label", "vertical_text", "visible", "log_scale", "fixed_width", "show_rays", "comments"])
    computed_attributes_set = set([])
    def __init__(self, factory, name, oid, path):
        DBObject.__init__(self, factory, name, oid, path)


class StratigraphicBoundary(DBObject):
    attributes_set = set(["name"])
    computed_attributes_set = set([])
    def __init__(self, factory, name, oid, path):
        DBObject.__init__(self, factory, name, oid, path)


class Isoline(DBObject):
    attributes_set = set(["value", "points", "name"])
    computed_attributes_set = set([])
    def __init__(self, factory, name, oid, path):
        DBObject.__init__(self, factory, name, oid, path)


class LinePlanar(DBObject):
    attributes_set = set(["name", "type", "path"])
    computed_attributes_set = set([])
    def __init__(self, factory, name, oid, path):
        DBObject.__init__(self, factory, name, oid, path)


class Image(DBObject):
    attributes_set = set(["name", "path", "type", "description", "imagePoints", "worldPoints", "lastModified"])
    computed_attributes_set = set([])
    def __init__(self, factory, name, oid, path):
        DBObject.__init__(self, factory, name, oid, path)


class FaultOnCube(DBObject):
    attributes_set = set(["name", "path"])
    computed_attributes_set = set([])
    def __init__(self, factory, name, oid, path):
        DBObject.__init__(self, factory, name, oid, path)


class Stratigraphy(DBObject):
    attributes_set = set(["name"])
    computed_attributes_set = set([])
    def __init__(self, factory, name, oid, path):
        DBObject.__init__(self, factory, name, oid, path)


class SeismicSurveysSet(DBObject):
    attributes_set = set(["lines", "cubes"])
    computed_attributes_set = set([])
    def __init__(self, factory, name, oid, path):
        DBObject.__init__(self, factory, name, oid, path)


class Map(DBObject):
    attributes_set = set(["name", "path", "nx", "ny", "origin", "dx", "dy"])
    computed_attributes_set = set([])
    def __init__(self, factory, name, oid, path):
        DBObject.__init__(self, factory, name, oid, path)


class CubePlanar(DBObject):
    attributes_set = set(["name", "type", "path"])
    computed_attributes_set = set([])
    def __init__(self, factory, name, oid, path):
        DBObject.__init__(self, factory, name, oid, path)


class Document(DBObject):
    attributes_set = set(["name", "path", "type", "description", "description1", "version", "lastModified", "size", "nRows"])
    computed_attributes_set = set([])
    def __init__(self, factory, name, oid, path):
        DBObject.__init__(self, factory, name, oid, path)


class StratigraphicLayer(DBObject):
    attributes_set = set(["name"])
    computed_attributes_set = set([])
    def __init__(self, factory, name, oid, path):
        DBObject.__init__(self, factory, name, oid, path)


class BackgroundValue(DBObject):
    attributes_set = set(["ref2par", "name", "value", "dispersion", "min", "max", "observationsNumber"])
    computed_attributes_set = set([])
    def __init__(self, factory, name, oid, path):
        DBObject.__init__(self, factory, name, oid, path)


class GroupOfHorizons(DBObject):
    attributes_set = set(["name", "members"])
    computed_attributes_set = set([])
    def __init__(self, factory, name, oid, path):
        DBObject.__init__(self, factory, name, oid, path)


class LineClassificationPortrait(DBObject):
    attributes_set = set(["name", "path"])
    computed_attributes_set = set([])
    def __init__(self, factory, name, oid, path):
        DBObject.__init__(self, factory, name, oid, path)


class WellLogTemplate(DBObject):
    attributes_set = set(["name", "path", "owner"])
    computed_attributes_set = set([])
    def __init__(self, factory, name, oid, path):
        DBObject.__init__(self, factory, name, oid, path)


class WellDocument(DBObject):
    attributes_set = set(["name", "path", "type", "description", "lastModified"])
    computed_attributes_set = set([])
    def __init__(self, factory, name, oid, path):
        DBObject.__init__(self, factory, name, oid, path)


class WellBoundaries(DBObject):
    attributes_set = set(["name", "top", "bottom", "boundaries"])
    computed_attributes_set = set([])
    def __init__(self, factory, name, oid, path):
        DBObject.__init__(self, factory, name, oid, path)


className2classIdString = {'LayerOnProfile': 'layl', 'CubeData': 'cubd', 'Layer': 'lay', 'WellBoundaries': 'wbnd', 'PointSet': 'pst1', 'FaultLine': 'fln1', 'MetaInformation': 'meta', 'WellLogTemplate': 'wtpl', 'FaultOnLine': 'fltl', 'WellMethodInfo': 'wmif', 'Line': 'lin1', 'Project': 'proj', 'Grid2D': 'grd2', 'Point': 'pnt1', 'LayerOnCube': 'layc', 'LineClassificationPortrait': 'lprt', 'GenericWellLogTemplate': 'wtpg', 'CoreGroup': 'cgr1', 'Repository': 'root', 'Map': 'map', 'CubeClassificationPortrait': 'cprt', 'StratigraphicBoundary': 'strb', 'WellProfile': 'wprf', 'WellLogTemplateEltProp': 'wtep', 'LogData': 'weld', 'BackgroundValue': 'bgrv', 'HorizonOnCube': 'horc', 'Isolineset': 'isls', 'PointParameter': 'par3', 'Cube': 'cube', 'EarthTemplate': 'etpl', 'FaultOnCube': 'fltc', 'Signal': 'sgnl', 'Area': 'are1', 'Image': 'img1', 'SeismicSurveysSet': 'ssrs', 'ParameterInWell': 'par2', 'Lineset': 'lnst', 'WellDocument': 'doc2', 'DirectionalLogData': 'dirl', 'Isoline': 'isl1', 'LinePlanar': 'scll', 'StratigraphicLayer': 'strl', 'Background': 'bkgr', 'Stratigraphy': 'str1', 'Vertex': 'vrtx', 'CubePlanar': 'sclc', 'EarthTemplateParameter': 'etpp', 'GeologicObjects': 'geo1', 'GroupOfHorizons': 'ghor', 'Horizon': 'hor', 'WellAttachmentToLine': 'aw2l', 'Well': 'wel1', 'HorizonOnLine': 'horl', 'WellAttachmentToCube': 'aw2c', 'Activity': 'act1', 'Parameter': 'par1', 'Document': 'doc1', 'LineData': 'lind', 'Fault': 'flt', 'WellLogTemplateElement': 'wtle', 'Line3D': 'ln3d'}

